!function(t){function c(l){if(n[l])return n[l].exports;var a=n[l]={exports:{},id:l,loaded:!1};return t[l].call(a.exports,a,a.exports,c),a.loaded=!0,a.exports}var n={};return c.m=t,c.c=n,c.p="",c(0)}({0:function(t,c,n){t.exports=n(8)},8:function(module,exports,__webpack_require__){eval("/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n/*!\n * iScroll v4.2.5 ~ Copyright (c) 2012 Matteo Spinelli, http://cubiq.org\n * Released under MIT license, http://cubiq.org/license\n */\n(function(window, doc){\nvar m = Math,\n	dummyStyle = doc.createElement('div').style,\n	vendor = (function () {\n		var vendors = 't,webkitT,MozT,msT,OT'.split(','),\n			t,\n			i = 0,\n			l = vendors.length;\n\n		for ( ; i < l; i++ ) {\n			t = vendors[i] + 'ransform';\n			if ( t in dummyStyle ) {\n				return vendors[i].substr(0, vendors[i].length - 1);\n			}\n		}\n\n		return false;\n	})(),\n	cssVendor = vendor ? '-' + vendor.toLowerCase() + '-' : '',\n\n	// Style properties\n	transform = prefixStyle('transform'),\n	transitionProperty = prefixStyle('transitionProperty'),\n	transitionDuration = prefixStyle('transitionDuration'),\n	transformOrigin = prefixStyle('transformOrigin'),\n	transitionTimingFunction = prefixStyle('transitionTimingFunction'),\n	transitionDelay = prefixStyle('transitionDelay'),\n\n    // Browser capabilities\n	isAndroid = (/android/gi).test(navigator.appVersion),\n	isIDevice = (/iphone|ipad/gi).test(navigator.appVersion),\n	isTouchPad = (/hp-tablet/gi).test(navigator.appVersion),\n\n    has3d = prefixStyle('perspective') in dummyStyle,\n    hasTouch = 'ontouchstart' in window && !isTouchPad,\n    hasTransform = vendor !== false,\n    hasTransitionEnd = prefixStyle('transition') in dummyStyle,\n\n	RESIZE_EV = 'onorientationchange' in window ? 'orientationchange' : 'resize',\n	START_EV = hasTouch ? 'touchstart' : 'mousedown',\n	MOVE_EV = hasTouch ? 'touchmove' : 'mousemove',\n	END_EV = hasTouch ? 'touchend' : 'mouseup',\n	CANCEL_EV = hasTouch ? 'touchcancel' : 'mouseup',\n	TRNEND_EV = (function () {\n		if ( vendor === false ) return false;\n\n		var transitionEnd = {\n				''			: 'transitionend',\n				'webkit'	: 'webkitTransitionEnd',\n				'Moz'		: 'transitionend',\n				'O'			: 'otransitionend',\n				'ms'		: 'MSTransitionEnd'\n			};\n\n		return transitionEnd[vendor];\n	})(),\n\n	nextFrame = (function() {\n		return window.requestAnimationFrame ||\n			window.webkitRequestAnimationFrame ||\n			window.mozRequestAnimationFrame ||\n			window.oRequestAnimationFrame ||\n			window.msRequestAnimationFrame ||\n			function(callback) { return setTimeout(callback, 1); };\n	})(),\n	cancelFrame = (function () {\n		return window.cancelRequestAnimationFrame ||\n			window.webkitCancelAnimationFrame ||\n			window.webkitCancelRequestAnimationFrame ||\n			window.mozCancelRequestAnimationFrame ||\n			window.oCancelRequestAnimationFrame ||\n			window.msCancelRequestAnimationFrame ||\n			clearTimeout;\n	})(),\n\n	// Helpers\n	translateZ = has3d ? ' translateZ(0)' : '',\n\n	// Constructor\n	iScroll = function (el, options) {\n		var that = this,\n			i;\n\n		that.wrapper = typeof el == 'object' ? el : doc.getElementById(el);\n		that.wrapper.style.overflow = 'hidden';\n		that.scroller = that.wrapper.children[0];\n\n		// Default options\n		that.options = {\n			hScroll: true,\n			vScroll: true,\n			x: 0,\n			y: 0,\n			bounce: true,\n			bounceLock: false,\n			momentum: true,\n			lockDirection: true,\n			useTransform: true,\n			useTransition: false,\n			topOffset: 0,\n			checkDOMChanges: false,		// Experimental\n			handleClick: true,\n\n			// Scrollbar\n			hScrollbar: true,\n			vScrollbar: true,\n			fixedScrollbar: isAndroid,\n			hideScrollbar: isIDevice,\n			fadeScrollbar: isIDevice && has3d,\n			scrollbarClass: '',\n\n			// Zoom\n			zoom: false,\n			zoomMin: 1,\n			zoomMax: 4,\n			doubleTapZoom: 2,\n			wheelAction: 'scroll',\n\n			// Snap\n			snap: false,\n			snapThreshold: 1,\n\n			// Events\n			onRefresh: null,\n			onBeforeScrollStart: function (e) { e.preventDefault(); },\n			onScrollStart: null,\n			onBeforeScrollMove: null,\n			onScrollMove: null,\n			onBeforeScrollEnd: null,\n			onScrollEnd: null,\n			onTouchEnd: null,\n			onDestroy: null,\n			onZoomStart: null,\n			onZoom: null,\n			onZoomEnd: null\n		};\n\n		// User defined options\n		for (i in options) that.options[i] = options[i];\n		\n		// Set starting position\n		that.x = that.options.x;\n		that.y = that.options.y;\n\n		// Normalize options\n		that.options.useTransform = hasTransform && that.options.useTransform;\n		that.options.hScrollbar = that.options.hScroll && that.options.hScrollbar;\n		that.options.vScrollbar = that.options.vScroll && that.options.vScrollbar;\n		that.options.zoom = that.options.useTransform && that.options.zoom;\n		that.options.useTransition = hasTransitionEnd && that.options.useTransition;\n\n		// Helpers FIX ANDROID BUG!\n		// translate3d and scale doesn't work together!\n		// Ignoring 3d ONLY WHEN YOU SET that.options.zoom\n		if ( that.options.zoom && isAndroid ){\n			translateZ = '';\n		}\n		\n		// Set some default styles\n		that.scroller.style[transitionProperty] = that.options.useTransform ? cssVendor + 'transform' : 'top left';\n		that.scroller.style[transitionDuration] = '0';\n		that.scroller.style[transformOrigin] = '0 0';\n		if (that.options.useTransition) that.scroller.style[transitionTimingFunction] = 'cubic-bezier(0.33,0.66,0.66,1)';\n		\n		if (that.options.useTransform) that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px)' + translateZ;\n		else that.scroller.style.cssText += ';position:absolute;top:' + that.y + 'px;left:' + that.x + 'px';\n\n		if (that.options.useTransition) that.options.fixedScrollbar = true;\n\n		that.refresh();\n\n		that._bind(RESIZE_EV, window);\n		that._bind(START_EV);\n		if (!hasTouch) {\n			if (that.options.wheelAction != 'none') {\n				that._bind('DOMMouseScroll');\n				that._bind('mousewheel');\n			}\n		}\n\n		if (that.options.checkDOMChanges) that.checkDOMTime = setInterval(function () {\n			that._checkDOMChanges();\n		}, 500);\n	};\n\n// Prototype\niScroll.prototype = {\n	enabled: true,\n	x: 0,\n	y: 0,\n	steps: [],\n	scale: 1,\n	currPageX: 0, currPageY: 0,\n	pagesX: [], pagesY: [],\n	aniTime: null,\n	wheelZoomCount: 0,\n	\n	handleEvent: function (e) {\n		var that = this;\n		switch(e.type) {\n			case START_EV:\n				if (!hasTouch && e.button !== 0) return;\n				that._start(e);\n				break;\n			case MOVE_EV: that._move(e); break;\n			case END_EV:\n			case CANCEL_EV: that._end(e); break;\n			case RESIZE_EV: that._resize(); break;\n			case 'DOMMouseScroll': case 'mousewheel': that._wheel(e); break;\n			case TRNEND_EV: that._transitionEnd(e); break;\n		}\n	},\n	\n	_checkDOMChanges: function () {\n		if (this.moved || this.zoomed || this.animating ||\n			(this.scrollerW == this.scroller.offsetWidth * this.scale && this.scrollerH == this.scroller.offsetHeight * this.scale)) return;\n\n		this.refresh();\n	},\n	\n	_scrollbar: function (dir) {\n		var that = this,\n			bar;\n\n		if (!that[dir + 'Scrollbar']) {\n			if (that[dir + 'ScrollbarWrapper']) {\n				if (hasTransform) that[dir + 'ScrollbarIndicator'].style[transform] = '';\n				that[dir + 'ScrollbarWrapper'].parentNode.removeChild(that[dir + 'ScrollbarWrapper']);\n				that[dir + 'ScrollbarWrapper'] = null;\n				that[dir + 'ScrollbarIndicator'] = null;\n			}\n\n			return;\n		}\n\n		if (!that[dir + 'ScrollbarWrapper']) {\n			// Create the scrollbar wrapper\n			bar = doc.createElement('div');\n\n			if (that.options.scrollbarClass) bar.className = that.options.scrollbarClass + dir.toUpperCase();\n			else bar.style.cssText = 'position:absolute;z-index:100;' + (dir == 'h' ? 'height:7px;bottom:1px;left:2px;right:' + (that.vScrollbar ? '7' : '2') + 'px' : 'width:7px;bottom:' + (that.hScrollbar ? '7' : '2') + 'px;top:2px;right:1px');\n\n			bar.style.cssText += ';pointer-events:none;' + cssVendor + 'transition-property:opacity;' + cssVendor + 'transition-duration:' + (that.options.fadeScrollbar ? '350ms' : '0') + ';overflow:hidden;opacity:' + (that.options.hideScrollbar ? '0' : '1');\n\n			that.wrapper.appendChild(bar);\n			that[dir + 'ScrollbarWrapper'] = bar;\n\n			// Create the scrollbar indicator\n			bar = doc.createElement('div');\n			if (!that.options.scrollbarClass) {\n				bar.style.cssText = 'position:absolute;z-index:100;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);' + cssVendor + 'background-clip:padding-box;' + cssVendor + 'box-sizing:border-box;' + (dir == 'h' ? 'height:100%' : 'width:100%') + ';' + cssVendor + 'border-radius:3px;border-radius:3px';\n			}\n			bar.style.cssText += ';pointer-events:none;' + cssVendor + 'transition-property:' + cssVendor + 'transform;' + cssVendor + 'transition-timing-function:cubic-bezier(0.33,0.66,0.66,1);' + cssVendor + 'transition-duration:0;' + cssVendor + 'transform: translate(0,0)' + translateZ;\n			if (that.options.useTransition) bar.style.cssText += ';' + cssVendor + 'transition-timing-function:cubic-bezier(0.33,0.66,0.66,1)';\n\n			that[dir + 'ScrollbarWrapper'].appendChild(bar);\n			that[dir + 'ScrollbarIndicator'] = bar;\n		}\n\n		if (dir == 'h') {\n			that.hScrollbarSize = that.hScrollbarWrapper.clientWidth;\n			that.hScrollbarIndicatorSize = m.max(m.round(that.hScrollbarSize * that.hScrollbarSize / that.scrollerW), 8);\n			that.hScrollbarIndicator.style.width = that.hScrollbarIndicatorSize + 'px';\n			that.hScrollbarMaxScroll = that.hScrollbarSize - that.hScrollbarIndicatorSize;\n			that.hScrollbarProp = that.hScrollbarMaxScroll / that.maxScrollX;\n		} else {\n			that.vScrollbarSize = that.vScrollbarWrapper.clientHeight;\n			that.vScrollbarIndicatorSize = m.max(m.round(that.vScrollbarSize * that.vScrollbarSize / that.scrollerH), 8);\n			that.vScrollbarIndicator.style.height = that.vScrollbarIndicatorSize + 'px';\n			that.vScrollbarMaxScroll = that.vScrollbarSize - that.vScrollbarIndicatorSize;\n			that.vScrollbarProp = that.vScrollbarMaxScroll / that.maxScrollY;\n		}\n\n		// Reset position\n		that._scrollbarPos(dir, true);\n	},\n	\n	_resize: function () {\n		var that = this;\n		setTimeout(function () { that.refresh(); }, isAndroid ? 200 : 0);\n	},\n	\n	_pos: function (x, y) {\n		if (this.zoomed) return;\n\n		x = this.hScroll ? x : 0;\n		y = this.vScroll ? y : 0;\n\n		if (this.options.useTransform) {\n			this.scroller.style[transform] = 'translate(' + x + 'px,' + y + 'px) scale(' + this.scale + ')' + translateZ;\n		} else {\n			x = m.round(x);\n			y = m.round(y);\n			this.scroller.style.left = x + 'px';\n			this.scroller.style.top = y + 'px';\n		}\n\n		this.x = x;\n		this.y = y;\n\n		this._scrollbarPos('h');\n		this._scrollbarPos('v');\n	},\n\n	_scrollbarPos: function (dir, hidden) {\n		var that = this,\n			pos = dir == 'h' ? that.x : that.y,\n			size;\n\n		if (!that[dir + 'Scrollbar']) return;\n\n		pos = that[dir + 'ScrollbarProp'] * pos;\n\n		if (pos < 0) {\n			if (!that.options.fixedScrollbar) {\n				size = that[dir + 'ScrollbarIndicatorSize'] + m.round(pos * 3);\n				if (size < 8) size = 8;\n				that[dir + 'ScrollbarIndicator'].style[dir == 'h' ? 'width' : 'height'] = size + 'px';\n			}\n			pos = 0;\n		} else if (pos > that[dir + 'ScrollbarMaxScroll']) {\n			if (!that.options.fixedScrollbar) {\n				size = that[dir + 'ScrollbarIndicatorSize'] - m.round((pos - that[dir + 'ScrollbarMaxScroll']) * 3);\n				if (size < 8) size = 8;\n				that[dir + 'ScrollbarIndicator'].style[dir == 'h' ? 'width' : 'height'] = size + 'px';\n				pos = that[dir + 'ScrollbarMaxScroll'] + (that[dir + 'ScrollbarIndicatorSize'] - size);\n			} else {\n				pos = that[dir + 'ScrollbarMaxScroll'];\n			}\n		}\n\n		that[dir + 'ScrollbarWrapper'].style[transitionDelay] = '0';\n		that[dir + 'ScrollbarWrapper'].style.opacity = hidden && that.options.hideScrollbar ? '0' : '1';\n		that[dir + 'ScrollbarIndicator'].style[transform] = 'translate(' + (dir == 'h' ? pos + 'px,0)' : '0,' + pos + 'px)') + translateZ;\n	},\n	\n	_start: function (e) {\n		var that = this,\n			point = hasTouch ? e.touches[0] : e,\n			matrix, x, y,\n			c1, c2;\n\n		if (!that.enabled) return;\n\n		if (that.options.onBeforeScrollStart) that.options.onBeforeScrollStart.call(that, e);\n\n		if (that.options.useTransition || that.options.zoom) that._transitionTime(0);\n\n		that.moved = false;\n		that.animating = false;\n		that.zoomed = false;\n		that.distX = 0;\n		that.distY = 0;\n		that.absDistX = 0;\n		that.absDistY = 0;\n		that.dirX = 0;\n		that.dirY = 0;\n\n		// Gesture start\n		if (that.options.zoom && hasTouch && e.touches.length > 1) {\n			c1 = m.abs(e.touches[0].pageX-e.touches[1].pageX);\n			c2 = m.abs(e.touches[0].pageY-e.touches[1].pageY);\n			that.touchesDistStart = m.sqrt(c1 * c1 + c2 * c2);\n\n			that.originX = m.abs(e.touches[0].pageX + e.touches[1].pageX - that.wrapperOffsetLeft * 2) / 2 - that.x;\n			that.originY = m.abs(e.touches[0].pageY + e.touches[1].pageY - that.wrapperOffsetTop * 2) / 2 - that.y;\n\n			if (that.options.onZoomStart) that.options.onZoomStart.call(that, e);\n		}\n\n		if (that.options.momentum) {\n			if (that.options.useTransform) {\n				// Very lame general purpose alternative to CSSMatrix\n				matrix = getComputedStyle(that.scroller, null)[transform].replace(/[^0-9\\-.,]/g, '').split(',');\n				x = +(matrix[12] || matrix[4]);\n				y = +(matrix[13] || matrix[5]);\n			} else {\n				x = +getComputedStyle(that.scroller, null).left.replace(/[^0-9-]/g, '');\n				y = +getComputedStyle(that.scroller, null).top.replace(/[^0-9-]/g, '');\n			}\n			\n			if (x != that.x || y != that.y) {\n				if (that.options.useTransition) that._unbind(TRNEND_EV);\n				else cancelFrame(that.aniTime);\n				that.steps = [];\n				that._pos(x, y);\n				if (that.options.onScrollEnd) that.options.onScrollEnd.call(that);\n			}\n		}\n\n		that.absStartX = that.x;	// Needed by snap threshold\n		that.absStartY = that.y;\n\n		that.startX = that.x;\n		that.startY = that.y;\n		that.pointX = point.pageX;\n		that.pointY = point.pageY;\n\n		that.startTime = e.timeStamp || Date.now();\n\n		if (that.options.onScrollStart) that.options.onScrollStart.call(that, e);\n\n		that._bind(MOVE_EV, window);\n		that._bind(END_EV, window);\n		that._bind(CANCEL_EV, window);\n	},\n	\n	_move: function (e) {\n		var that = this,\n			point = hasTouch ? e.touches[0] : e,\n			deltaX = point.pageX - that.pointX,\n			deltaY = point.pageY - that.pointY,\n			newX = that.x + deltaX,\n			newY = that.y + deltaY,\n			c1, c2, scale,\n			timestamp = e.timeStamp || Date.now();\n\n		if (that.options.onBeforeScrollMove) that.options.onBeforeScrollMove.call(that, e);\n\n		// Zoom\n		if (that.options.zoom && hasTouch && e.touches.length > 1) {\n			c1 = m.abs(e.touches[0].pageX - e.touches[1].pageX);\n			c2 = m.abs(e.touches[0].pageY - e.touches[1].pageY);\n			that.touchesDist = m.sqrt(c1*c1+c2*c2);\n\n			that.zoomed = true;\n\n			scale = 1 / that.touchesDistStart * that.touchesDist * this.scale;\n\n			if (scale < that.options.zoomMin) scale = 0.5 * that.options.zoomMin * Math.pow(2.0, scale / that.options.zoomMin);\n			else if (scale > that.options.zoomMax) scale = 2.0 * that.options.zoomMax * Math.pow(0.5, that.options.zoomMax / scale);\n\n			that.lastScale = scale / this.scale;\n\n			newX = this.originX - this.originX * that.lastScale + this.x;\n			newY = this.originY - this.originY * that.lastScale + this.y;\n\n			this.scroller.style[transform] = 'translate(' + newX + 'px,' + newY + 'px) scale(' + scale + ')' + translateZ;\n\n			if (that.options.onZoom) that.options.onZoom.call(that, e);\n			return;\n		}\n\n		that.pointX = point.pageX;\n		that.pointY = point.pageY;\n\n		// Slow down if outside of the boundaries\n		if (newX > 0 || newX < that.maxScrollX) {\n			newX = that.options.bounce ? that.x + (deltaX / 2) : newX >= 0 || that.maxScrollX >= 0 ? 0 : that.maxScrollX;\n		}\n		if (newY > that.minScrollY || newY < that.maxScrollY) {\n			newY = that.options.bounce ? that.y + (deltaY / 2) : newY >= that.minScrollY || that.maxScrollY >= 0 ? that.minScrollY : that.maxScrollY;\n		}\n\n		that.distX += deltaX;\n		that.distY += deltaY;\n		that.absDistX = m.abs(that.distX);\n		that.absDistY = m.abs(that.distY);\n\n		if (that.absDistX < 6 && that.absDistY < 6) {\n			return;\n		}\n\n		// Lock direction\n		if (that.options.lockDirection) {\n			if (that.absDistX > that.absDistY + 5) {\n				newY = that.y;\n				deltaY = 0;\n			} else if (that.absDistY > that.absDistX + 5) {\n				newX = that.x;\n				deltaX = 0;\n			}\n		}\n\n		that.moved = true;\n		that._pos(newX, newY);\n		that.dirX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;\n		that.dirY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;\n\n		if (timestamp - that.startTime > 300) {\n			that.startTime = timestamp;\n			that.startX = that.x;\n			that.startY = that.y;\n		}\n		\n		if (that.options.onScrollMove) that.options.onScrollMove.call(that, e);\n	},\n	\n	_end: function (e) {\n		if (hasTouch && e.touches.length !== 0) return;\n\n		var that = this,\n			point = hasTouch ? e.changedTouches[0] : e,\n			target, ev,\n			momentumX = { dist:0, time:0 },\n			momentumY = { dist:0, time:0 },\n			duration = (e.timeStamp || Date.now()) - that.startTime,\n			newPosX = that.x,\n			newPosY = that.y,\n			distX, distY,\n			newDuration,\n			snap,\n			scale;\n\n		that._unbind(MOVE_EV, window);\n		that._unbind(END_EV, window);\n		that._unbind(CANCEL_EV, window);\n\n		if (that.options.onBeforeScrollEnd) that.options.onBeforeScrollEnd.call(that, e);\n\n		if (that.zoomed) {\n			scale = that.scale * that.lastScale;\n			scale = Math.max(that.options.zoomMin, scale);\n			scale = Math.min(that.options.zoomMax, scale);\n			that.lastScale = scale / that.scale;\n			that.scale = scale;\n\n			that.x = that.originX - that.originX * that.lastScale + that.x;\n			that.y = that.originY - that.originY * that.lastScale + that.y;\n			\n			that.scroller.style[transitionDuration] = '200ms';\n			that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px) scale(' + that.scale + ')' + translateZ;\n			\n			that.zoomed = false;\n			that.refresh();\n\n			if (that.options.onZoomEnd) that.options.onZoomEnd.call(that, e);\n			return;\n		}\n\n		if (!that.moved) {\n			if (hasTouch) {\n				if (that.doubleTapTimer && that.options.zoom) {\n					// Double tapped\n					clearTimeout(that.doubleTapTimer);\n					that.doubleTapTimer = null;\n					if (that.options.onZoomStart) that.options.onZoomStart.call(that, e);\n					that.zoom(that.pointX, that.pointY, that.scale == 1 ? that.options.doubleTapZoom : 1);\n					if (that.options.onZoomEnd) {\n						setTimeout(function() {\n							that.options.onZoomEnd.call(that, e);\n						}, 200); // 200 is default zoom duration\n					}\n				} else if (this.options.handleClick) {\n					that.doubleTapTimer = setTimeout(function () {\n						that.doubleTapTimer = null;\n\n						// Find the last touched element\n						target = point.target;\n						while (target.nodeType != 1) target = target.parentNode;\n\n						if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {\n							ev = doc.createEvent('MouseEvents');\n							ev.initMouseEvent('click', true, true, e.view, 1,\n								point.screenX, point.screenY, point.clientX, point.clientY,\n								e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\n								0, null);\n							ev._fake = true;\n							target.dispatchEvent(ev);\n						}\n					}, that.options.zoom ? 250 : 0);\n				}\n			}\n\n			that._resetPos(400);\n\n			if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n			return;\n		}\n\n		if (duration < 300 && that.options.momentum) {\n			momentumX = newPosX ? that._momentum(newPosX - that.startX, duration, -that.x, that.scrollerW - that.wrapperW + that.x, that.options.bounce ? that.wrapperW : 0) : momentumX;\n			momentumY = newPosY ? that._momentum(newPosY - that.startY, duration, -that.y, (that.maxScrollY < 0 ? that.scrollerH - that.wrapperH + that.y - that.minScrollY : 0), that.options.bounce ? that.wrapperH : 0) : momentumY;\n\n			newPosX = that.x + momentumX.dist;\n			newPosY = that.y + momentumY.dist;\n\n			if ((that.x > 0 && newPosX > 0) || (that.x < that.maxScrollX && newPosX < that.maxScrollX)) momentumX = { dist:0, time:0 };\n			if ((that.y > that.minScrollY && newPosY > that.minScrollY) || (that.y < that.maxScrollY && newPosY < that.maxScrollY)) momentumY = { dist:0, time:0 };\n		}\n\n		if (momentumX.dist || momentumY.dist) {\n			newDuration = m.max(m.max(momentumX.time, momentumY.time), 10);\n\n			// Do we need to snap?\n			if (that.options.snap) {\n				distX = newPosX - that.absStartX;\n				distY = newPosY - that.absStartY;\n				if (m.abs(distX) < that.options.snapThreshold && m.abs(distY) < that.options.snapThreshold) { that.scrollTo(that.absStartX, that.absStartY, 200); }\n				else {\n					snap = that._snap(newPosX, newPosY);\n					newPosX = snap.x;\n					newPosY = snap.y;\n					newDuration = m.max(snap.time, newDuration);\n				}\n			}\n\n			that.scrollTo(m.round(newPosX), m.round(newPosY), newDuration);\n\n			if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n			return;\n		}\n\n		// Do we need to snap?\n		if (that.options.snap) {\n			distX = newPosX - that.absStartX;\n			distY = newPosY - that.absStartY;\n			if (m.abs(distX) < that.options.snapThreshold && m.abs(distY) < that.options.snapThreshold) that.scrollTo(that.absStartX, that.absStartY, 200);\n			else {\n				snap = that._snap(that.x, that.y);\n				if (snap.x != that.x || snap.y != that.y) that.scrollTo(snap.x, snap.y, snap.time);\n			}\n\n			if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n			return;\n		}\n\n		that._resetPos(200);\n		if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n	},\n	\n	_resetPos: function (time) {\n		var that = this,\n			resetX = that.x >= 0 ? 0 : that.x < that.maxScrollX ? that.maxScrollX : that.x,\n			resetY = that.y >= that.minScrollY || that.maxScrollY > 0 ? that.minScrollY : that.y < that.maxScrollY ? that.maxScrollY : that.y;\n\n		if (resetX == that.x && resetY == that.y) {\n			if (that.moved) {\n				that.moved = false;\n				if (that.options.onScrollEnd) that.options.onScrollEnd.call(that);		// Execute custom code on scroll end\n			}\n\n			if (that.hScrollbar && that.options.hideScrollbar) {\n				if (vendor == 'webkit') that.hScrollbarWrapper.style[transitionDelay] = '300ms';\n				that.hScrollbarWrapper.style.opacity = '0';\n			}\n			if (that.vScrollbar && that.options.hideScrollbar) {\n				if (vendor == 'webkit') that.vScrollbarWrapper.style[transitionDelay] = '300ms';\n				that.vScrollbarWrapper.style.opacity = '0';\n			}\n\n			return;\n		}\n\n		that.scrollTo(resetX, resetY, time || 0);\n	},\n\n	_wheel: function (e) {\n		var that = this,\n			wheelDeltaX, wheelDeltaY,\n			deltaX, deltaY,\n			deltaScale;\n\n		if ('wheelDeltaX' in e) {\n			wheelDeltaX = e.wheelDeltaX / 12;\n			wheelDeltaY = e.wheelDeltaY / 12;\n		} else if('wheelDelta' in e) {\n			wheelDeltaX = wheelDeltaY = e.wheelDelta / 12;\n		} else if ('detail' in e) {\n			wheelDeltaX = wheelDeltaY = -e.detail * 3;\n		} else {\n			return;\n		}\n		\n		if (that.options.wheelAction == 'zoom') {\n			deltaScale = that.scale * Math.pow(2, 1/3 * (wheelDeltaY ? wheelDeltaY / Math.abs(wheelDeltaY) : 0));\n			if (deltaScale < that.options.zoomMin) deltaScale = that.options.zoomMin;\n			if (deltaScale > that.options.zoomMax) deltaScale = that.options.zoomMax;\n			\n			if (deltaScale != that.scale) {\n				if (!that.wheelZoomCount && that.options.onZoomStart) that.options.onZoomStart.call(that, e);\n				that.wheelZoomCount++;\n				\n				that.zoom(e.pageX, e.pageY, deltaScale, 400);\n				\n				setTimeout(function() {\n					that.wheelZoomCount--;\n					if (!that.wheelZoomCount && that.options.onZoomEnd) that.options.onZoomEnd.call(that, e);\n				}, 400);\n			}\n			\n			return;\n		}\n		\n		deltaX = that.x + wheelDeltaX;\n		deltaY = that.y + wheelDeltaY;\n\n		if (deltaX > 0) deltaX = 0;\n		else if (deltaX < that.maxScrollX) deltaX = that.maxScrollX;\n\n		if (deltaY > that.minScrollY) deltaY = that.minScrollY;\n		else if (deltaY < that.maxScrollY) deltaY = that.maxScrollY;\n    \n		if (that.maxScrollY < 0) {\n			that.scrollTo(deltaX, deltaY, 0);\n		}\n	},\n	\n	_transitionEnd: function (e) {\n		var that = this;\n\n		if (e.target != that.scroller) return;\n\n		that._unbind(TRNEND_EV);\n		\n		that._startAni();\n	},\n\n\n	/**\n	*\n	* Utilities\n	*\n	*/\n	_startAni: function () {\n		var that = this,\n			startX = that.x, startY = that.y,\n			startTime = Date.now(),\n			step, easeOut,\n			animate;\n\n		if (that.animating) return;\n		\n		if (!that.steps.length) {\n			that._resetPos(400);\n			return;\n		}\n		\n		step = that.steps.shift();\n		\n		if (step.x == startX && step.y == startY) step.time = 0;\n\n		that.animating = true;\n		that.moved = true;\n		\n		if (that.options.useTransition) {\n			that._transitionTime(step.time);\n			that._pos(step.x, step.y);\n			that.animating = false;\n			if (step.time) that._bind(TRNEND_EV);\n			else that._resetPos(0);\n			return;\n		}\n\n		animate = function () {\n			var now = Date.now(),\n				newX, newY;\n\n			if (now >= startTime + step.time) {\n				that._pos(step.x, step.y);\n				that.animating = false;\n				if (that.options.onAnimationEnd) that.options.onAnimationEnd.call(that);			// Execute custom code on animation end\n				that._startAni();\n				return;\n			}\n\n			now = (now - startTime) / step.time - 1;\n			easeOut = m.sqrt(1 - now * now);\n			newX = (step.x - startX) * easeOut + startX;\n			newY = (step.y - startY) * easeOut + startY;\n			that._pos(newX, newY);\n			if (that.animating) that.aniTime = nextFrame(animate);\n		};\n\n		animate();\n	},\n\n	_transitionTime: function (time) {\n		time += 'ms';\n		this.scroller.style[transitionDuration] = time;\n		if (this.hScrollbar) this.hScrollbarIndicator.style[transitionDuration] = time;\n		if (this.vScrollbar) this.vScrollbarIndicator.style[transitionDuration] = time;\n	},\n\n	_momentum: function (dist, time, maxDistUpper, maxDistLower, size) {\n		var deceleration = 0.0006,\n			speed = m.abs(dist) / time,\n			newDist = (speed * speed) / (2 * deceleration),\n			newTime = 0, outsideDist = 0;\n\n		// Proportinally reduce speed if we are outside of the boundaries\n		if (dist > 0 && newDist > maxDistUpper) {\n			outsideDist = size / (6 / (newDist / speed * deceleration));\n			maxDistUpper = maxDistUpper + outsideDist;\n			speed = speed * maxDistUpper / newDist;\n			newDist = maxDistUpper;\n		} else if (dist < 0 && newDist > maxDistLower) {\n			outsideDist = size / (6 / (newDist / speed * deceleration));\n			maxDistLower = maxDistLower + outsideDist;\n			speed = speed * maxDistLower / newDist;\n			newDist = maxDistLower;\n		}\n\n		newDist = newDist * (dist < 0 ? -1 : 1);\n		newTime = speed / deceleration;\n\n		return { dist: newDist, time: m.round(newTime) };\n	},\n\n	_offset: function (el) {\n		var left = -el.offsetLeft,\n			top = -el.offsetTop;\n			\n		while (el = el.offsetParent) {\n			left -= el.offsetLeft;\n			top -= el.offsetTop;\n		}\n		\n		if (el != this.wrapper) {\n			left *= this.scale;\n			top *= this.scale;\n		}\n\n		return { left: left, top: top };\n	},\n\n	_snap: function (x, y) {\n		var that = this,\n			i, l,\n			page, time,\n			sizeX, sizeY;\n\n		// Check page X\n		page = that.pagesX.length - 1;\n		for (i=0, l=that.pagesX.length; i<l; i++) {\n			if (x >= that.pagesX[i]) {\n				page = i;\n				break;\n			}\n		}\n		if (page == that.currPageX && page > 0 && that.dirX < 0) page--;\n		x = that.pagesX[page];\n		sizeX = m.abs(x - that.pagesX[that.currPageX]);\n		sizeX = sizeX ? m.abs(that.x - x) / sizeX * 500 : 0;\n		that.currPageX = page;\n\n		// Check page Y\n		page = that.pagesY.length-1;\n		for (i=0; i<page; i++) {\n			if (y >= that.pagesY[i]) {\n				page = i;\n				break;\n			}\n		}\n		if (page == that.currPageY && page > 0 && that.dirY < 0) page--;\n		y = that.pagesY[page];\n		sizeY = m.abs(y - that.pagesY[that.currPageY]);\n		sizeY = sizeY ? m.abs(that.y - y) / sizeY * 500 : 0;\n		that.currPageY = page;\n\n		// Snap with constant speed (proportional duration)\n		time = m.round(m.max(sizeX, sizeY)) || 200;\n\n		return { x: x, y: y, time: time };\n	},\n\n	_bind: function (type, el, bubble) {\n		(el || this.scroller).addEventListener(type, this, !!bubble);\n	},\n\n	_unbind: function (type, el, bubble) {\n		(el || this.scroller).removeEventListener(type, this, !!bubble);\n	},\n\n\n	/**\n	*\n	* Public methods\n	*\n	*/\n	destroy: function () {\n		var that = this;\n\n		that.scroller.style[transform] = '';\n\n		// Remove the scrollbars\n		that.hScrollbar = false;\n		that.vScrollbar = false;\n		that._scrollbar('h');\n		that._scrollbar('v');\n\n		// Remove the event listeners\n		that._unbind(RESIZE_EV, window);\n		that._unbind(START_EV);\n		that._unbind(MOVE_EV, window);\n		that._unbind(END_EV, window);\n		that._unbind(CANCEL_EV, window);\n		\n		if (!that.options.hasTouch) {\n			that._unbind('DOMMouseScroll');\n			that._unbind('mousewheel');\n		}\n		\n		if (that.options.useTransition) that._unbind(TRNEND_EV);\n		\n		if (that.options.checkDOMChanges) clearInterval(that.checkDOMTime);\n		\n		if (that.options.onDestroy) that.options.onDestroy.call(that);\n	},\n\n	refresh: function () {\n		var that = this,\n			offset,\n			i, l,\n			els,\n			pos = 0,\n			page = 0;\n\n		if (that.scale < that.options.zoomMin) that.scale = that.options.zoomMin;\n		that.wrapperW = that.wrapper.clientWidth || 1;\n		that.wrapperH = that.wrapper.clientHeight || 1;\n\n		that.minScrollY = -that.options.topOffset || 0;\n		that.scrollerW = m.round(that.scroller.offsetWidth * that.scale);\n		that.scrollerH = m.round((that.scroller.offsetHeight + that.minScrollY) * that.scale);\n		that.maxScrollX = that.wrapperW - that.scrollerW;\n		that.maxScrollY = that.wrapperH - that.scrollerH + that.minScrollY;\n		that.dirX = 0;\n		that.dirY = 0;\n\n		if (that.options.onRefresh) that.options.onRefresh.call(that);\n\n		that.hScroll = that.options.hScroll && that.maxScrollX < 0;\n		that.vScroll = that.options.vScroll && (!that.options.bounceLock && !that.hScroll || that.scrollerH > that.wrapperH);\n\n		that.hScrollbar = that.hScroll && that.options.hScrollbar;\n		that.vScrollbar = that.vScroll && that.options.vScrollbar && that.scrollerH > that.wrapperH;\n\n		offset = that._offset(that.wrapper);\n		that.wrapperOffsetLeft = -offset.left;\n		that.wrapperOffsetTop = -offset.top;\n\n		// Prepare snap\n		if (typeof that.options.snap == 'string') {\n			that.pagesX = [];\n			that.pagesY = [];\n			els = that.scroller.querySelectorAll(that.options.snap);\n			for (i=0, l=els.length; i<l; i++) {\n				pos = that._offset(els[i]);\n				pos.left += that.wrapperOffsetLeft;\n				pos.top += that.wrapperOffsetTop;\n				that.pagesX[i] = pos.left < that.maxScrollX ? that.maxScrollX : pos.left * that.scale;\n				that.pagesY[i] = pos.top < that.maxScrollY ? that.maxScrollY : pos.top * that.scale;\n			}\n		} else if (that.options.snap) {\n			that.pagesX = [];\n			while (pos >= that.maxScrollX) {\n				that.pagesX[page] = pos;\n				pos = pos - that.wrapperW;\n				page++;\n			}\n			if (that.maxScrollX%that.wrapperW) that.pagesX[that.pagesX.length] = that.maxScrollX - that.pagesX[that.pagesX.length-1] + that.pagesX[that.pagesX.length-1];\n\n			pos = 0;\n			page = 0;\n			that.pagesY = [];\n			while (pos >= that.maxScrollY) {\n				that.pagesY[page] = pos;\n				pos = pos - that.wrapperH;\n				page++;\n			}\n			if (that.maxScrollY%that.wrapperH) that.pagesY[that.pagesY.length] = that.maxScrollY - that.pagesY[that.pagesY.length-1] + that.pagesY[that.pagesY.length-1];\n		}\n\n		// Prepare the scrollbars\n		that._scrollbar('h');\n		that._scrollbar('v');\n\n		if (!that.zoomed) {\n			that.scroller.style[transitionDuration] = '0';\n			that._resetPos(400);\n		}\n	},\n\n	scrollTo: function (x, y, time, relative) {\n		var that = this,\n			step = x,\n			i, l;\n\n		that.stop();\n\n		if (!step.length) step = [{ x: x, y: y, time: time, relative: relative }];\n		\n		for (i=0, l=step.length; i<l; i++) {\n			if (step[i].relative) { step[i].x = that.x - step[i].x; step[i].y = that.y - step[i].y; }\n			that.steps.push({ x: step[i].x, y: step[i].y, time: step[i].time || 0 });\n		}\n\n		that._startAni();\n	},\n\n	scrollToElement: function (el, time) {\n		var that = this, pos;\n		el = el.nodeType ? el : that.scroller.querySelector(el);\n		if (!el) return;\n\n		pos = that._offset(el);\n		pos.left += that.wrapperOffsetLeft;\n		pos.top += that.wrapperOffsetTop;\n\n		pos.left = pos.left > 0 ? 0 : pos.left < that.maxScrollX ? that.maxScrollX : pos.left;\n		pos.top = pos.top > that.minScrollY ? that.minScrollY : pos.top < that.maxScrollY ? that.maxScrollY : pos.top;\n		time = time === undefined ? m.max(m.abs(pos.left)*2, m.abs(pos.top)*2) : time;\n\n		that.scrollTo(pos.left, pos.top, time);\n	},\n\n	scrollToPage: function (pageX, pageY, time) {\n		var that = this, x, y;\n		\n		time = time === undefined ? 400 : time;\n\n		if (that.options.onScrollStart) that.options.onScrollStart.call(that);\n\n		if (that.options.snap) {\n			pageX = pageX == 'next' ? that.currPageX+1 : pageX == 'prev' ? that.currPageX-1 : pageX;\n			pageY = pageY == 'next' ? that.currPageY+1 : pageY == 'prev' ? that.currPageY-1 : pageY;\n\n			pageX = pageX < 0 ? 0 : pageX > that.pagesX.length-1 ? that.pagesX.length-1 : pageX;\n			pageY = pageY < 0 ? 0 : pageY > that.pagesY.length-1 ? that.pagesY.length-1 : pageY;\n\n			that.currPageX = pageX;\n			that.currPageY = pageY;\n			x = that.pagesX[pageX];\n			y = that.pagesY[pageY];\n		} else {\n			x = -that.wrapperW * pageX;\n			y = -that.wrapperH * pageY;\n			if (x < that.maxScrollX) x = that.maxScrollX;\n			if (y < that.maxScrollY) y = that.maxScrollY;\n		}\n\n		that.scrollTo(x, y, time);\n	},\n\n	disable: function () {\n		this.stop();\n		this._resetPos(0);\n		this.enabled = false;\n\n		// If disabled after touchstart we make sure that there are no left over events\n		this._unbind(MOVE_EV, window);\n		this._unbind(END_EV, window);\n		this._unbind(CANCEL_EV, window);\n	},\n	\n	enable: function () {\n		this.enabled = true;\n	},\n	\n	stop: function () {\n		if (this.options.useTransition) this._unbind(TRNEND_EV);\n		else cancelFrame(this.aniTime);\n		this.steps = [];\n		this.moved = false;\n		this.animating = false;\n	},\n	\n	zoom: function (x, y, scale, time) {\n		var that = this,\n			relScale = scale / that.scale;\n\n		if (!that.options.useTransform) return;\n\n		that.zoomed = true;\n		time = time === undefined ? 200 : time;\n		x = x - that.wrapperOffsetLeft - that.x;\n		y = y - that.wrapperOffsetTop - that.y;\n		that.x = x - x * relScale + that.x;\n		that.y = y - y * relScale + that.y;\n\n		that.scale = scale;\n		that.refresh();\n\n		that.x = that.x > 0 ? 0 : that.x < that.maxScrollX ? that.maxScrollX : that.x;\n		that.y = that.y > that.minScrollY ? that.minScrollY : that.y < that.maxScrollY ? that.maxScrollY : that.y;\n\n		that.scroller.style[transitionDuration] = time + 'ms';\n		that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px) scale(' + scale + ')' + translateZ;\n		that.zoomed = false;\n	},\n	\n	isReady: function () {\n		return !this.moved && !this.zoomed && !this.animating;\n	}\n};\n\nfunction prefixStyle (style) {\n	if ( vendor === '' ) return style;\n\n	style = style.charAt(0).toUpperCase() + style.substr(1);\n	return vendor + style;\n}\n\ndummyStyle = null;	// for the sake of it\n\nif (true) exports.iScroll = iScroll;\nelse window.iScroll = iScroll;\n\n})(window, document);\n\n\n//# sourceMappingURL=data:application/json;base64,");
}});